{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","id","rank","title","openDate","audiCount","className","App","state","isLoading","dailyBoxOfficeList","getMovies","a","async","axios","get","data","boxOfficeResult","setState","this","map","movie","key","movieCd","movieNm","openDt","audiAcc","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAuBeA,MAnBf,YAAwD,IAAxCC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,UAC1C,OAAO,yBAAKC,UAAU,SACrB,0BAAMA,UAAU,YAAYL,GAC5B,0BAAMK,UAAU,cAAcJ,GAC9B,yBAAKI,UAAU,cACd,wBAAIA,UAAU,gBAAgBH,GAC9B,0BAAMG,UAAU,mBAAmBF,GAFpC,MAEuD,0BAAME,UAAU,mBAAmBD,EAAnC,aCwC1CE,G,iNA5CbC,MAAQ,CACNC,WAAW,EACXC,mBAAoB,I,EAEtBC,UAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAKAE,IAAMC,IAAI,uJALV,gBAGaL,EAHb,EAERM,KACEC,gBAAmBP,mBAIvB,EAAKQ,SAAU,CAAER,qBAAoBD,WAAW,IAPtC,sC,mFAWVU,KAAKR,c,+BAGE,IAAD,EACoCQ,KAAKX,MAAvCC,EADF,EACEA,UAAWC,EADb,EACaA,mBACnB,OAAO,6BAASJ,UAAU,aACvBG,EACC,yBAAKH,UAAU,UACb,0BAAMA,UAAU,gBAAhB,YAGF,yBAAKA,UAAU,cACVI,EAAmBU,KAAI,SAAAC,GAAK,OAC3B,kBAAC,EAAD,CACEC,IAAeD,EAAME,QACrBrB,KAAemB,EAAMnB,KACrBD,GAAeoB,EAAME,QACrBpB,MAAekB,EAAMG,QACrBpB,SAAeiB,EAAMI,OACrBpB,UAAegB,EAAMK,mB,GAnCnBC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0096245d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Movie.css\";\n\nfunction Movie({id, rank, title, openDate, audiCount}) {\n\treturn <div className=\"movie\">\n\t\t<span className=\"movie_id\">{id}</span>\n\t\t<span className=\"movie_rank\">{rank}</span>\n\t\t<div className=\"movie_data\">\n\t\t\t<h1 className=\"movie__title\">{title}</h1>\n\t\t\t<span className=\"movie__opendate\">{openDate}</span> | <span className=\"movie_audicount\">{audiCount}ëª…</span>\n\t\t</div>\n\t</div>;\n}\n\nMovie.propTypes = {\n\tid: PropTypes.string.isRequired,\n\trank: PropTypes.string.isRequired,\n\ttitle: PropTypes.string.isRequired,\n\topenDate: PropTypes.string.isRequired,\n\taudiCount: PropTypes.string.isRequired\n}\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    dailyBoxOfficeList: []\n  };\n  getMovies = async () => {\n    const { \n      data: { \n        boxOfficeResult: { dailyBoxOfficeList }\n      }\n    } = await axios.get(\"http://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=1943b60fca7f60c201b5702f56747fc8&targetDt=20200201\");\n    // console.log(movies.data.dailyBoxOfficeListResult.dailyBoxOfficeList)\n    this.setState( { dailyBoxOfficeList, isLoading: false} )\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render(){\n    const { isLoading, dailyBoxOfficeList } = this.state;\n    return <section className=\"container\"> \n      {isLoading ? (\n        <div className=\"loader\">\n          <span className=\"loader__text\">loading</span>\n        </div>\n       ) : ( \n        <div className=\"movieLists\">\n            {dailyBoxOfficeList.map(movie => (\n              <Movie\n                key         = {movie.movieCd}\n                rank        = {movie.rank}\n                id          = {movie.movieCd}\n                title       = {movie.movieNm}\n                openDate    = {movie.openDt}\n                audiCount   = {movie.audiAcc}\n              />\n            ))}\n        </div>\n      )}\n      </section>;\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}